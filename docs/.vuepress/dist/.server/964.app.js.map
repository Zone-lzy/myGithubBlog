{"version":3,"file":"964.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;EC5IA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAwE;AACxE;;AAEA,CAA0H;AAC1H,iCAAiC,+BAAe,uBAAuB,SAAS;;AAEhF,4CAAe;;;;;;;;ACNF;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D;AACA;AACA,SAAe;AACf;AACA;AACA;AACA;AACA","sources":["webpack://gitbook/./docs/.vuepress/.temp/pages/第一季.html.js","webpack://gitbook/./docs/.vuepress/.temp/pages/第一季.html.vue","webpack://gitbook/./docs/.vuepress/.temp/pages/第一季.html.vue?4095","webpack://gitbook/./node_modules/vue-loader/dist/exportHelper.js"],"sourcesContent":["export const data = {\n  \"key\": \"v-6958bfcd\",\n  \"path\": \"/%E7%AC%AC%E4%B8%80%E5%AD%A3.html\",\n  \"title\": \"1、自增变量\",\n  \"lang\": \"zh-CN\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 1,\n      \"title\": \"1、自增变量\",\n      \"slug\": \"_1、自增变量\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"2、单例设计模式\",\n      \"slug\": \"_2、单例设计模式\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"3、类的初始化和实例初始化等\",\n      \"slug\": \"_3、类的初始化和实例初始化等\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"4、参数的传递机制\",\n      \"slug\": \"_4、参数的传递机制\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"5、面试题--递归与迭代\",\n      \"slug\": \"_5、面试题-递归与迭代\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"6、成员变量和局部变量\",\n      \"slug\": \"_6、成员变量和局部变量\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"7、bean的作用域\",\n      \"slug\": \"_7、bean的作用域\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"8、事务的传播属性和事务的隔离级别\",\n      \"slug\": \"_8、事务的传播属性和事务的隔离级别\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"9、解决乱码问题\",\n      \"slug\": \"_9、解决乱码问题\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"10、简单谈谈SpringMVC的 工作流程\",\n      \"slug\": \"_10、简单谈谈springmvc的-工作流程\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"11、Mybaits中当实体类中的属性名和表中字段名不一样怎么办？\",\n      \"slug\": \"_11、mybaits中当实体类中的属性名和表中字段名不一样怎么办\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"12、linux常用服务相关命令\",\n      \"slug\": \"_12、linux常用服务相关命令\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"13、git分支相关命令，实际应用\",\n      \"slug\": \"_13、git分支相关命令-实际应用\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"14、Redis持久化的类型，以及区别\",\n      \"slug\": \"_14、redis持久化的类型-以及区别\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"15、Myswl什么时候适合创建索引，什么时候不适合\",\n      \"slug\": \"_15、myswl什么时候适合创建索引-什么时候不适合\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"16、JVM垃圾回收机制，GC发生在JVM哪部分，有几种红GC，它们的算法是什么？\",\n      \"slug\": \"_16、jvm垃圾回收机制-gc发生在jvm哪部分-有几种红gc-它们的算法是什么\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"17、redis在项目中的使用场景，\",\n      \"slug\": \"_17、redis在项目中的使用场景\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"18、Elasticsearch和solr的区别\",\n      \"slug\": \"_18、elasticsearch和solr的区别\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"19、单点登录实现过程\",\n      \"slug\": \"_19、单点登录实现过程\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"20、购物车实现过程\",\n      \"slug\": \"_20、购物车实现过程\",\n      \"children\": []\n    },\n    {\n      \"level\": 1,\n      \"title\": \"21、消息队列在项目中的使用\",\n      \"slug\": \"_21、消息队列在项目中的使用\",\n      \"children\": []\n    }\n  ],\n  \"filePathRelative\": \"第一季.md\",\n  \"git\": {\n    \"updatedTime\": null,\n    \"contributors\": []\n  }\n}\n","<h1 id=\"_1、自增变量\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1、自增变量\" aria-hidden=\"true\">#</a> 1、自增变量</h1>\n<p><img src=\"第一季.assets/image-20210715164920008.png\" alt=\"image-20210715164920008\"></p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>i=1\ni=2\ni=j=3\nk=4+4*4=20\ni=5\n\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div></div><p><img src=\"第一季.assets/image-20210715165203052.png\" alt=\"image-20210715165203052\"></p>\n<p><img src=\"第一季.assets/image-20210715170255564.png\" alt=\"image-20210715170255564\"></p>\n<p>波兰计算器，，</p>\n<p><img src=\"第一季.assets/image-20210715170842535.png\" alt=\"image-20210715170842535\"></p>\n<p><img src=\"第一季.assets/image-20210715171658195.png\" alt=\"image-20210715171658195\"></p>\n<p><img src=\"第一季.assets/image-20210715171726552.png\" alt=\"image-20210715171726552\"></p>\n<p><img src=\"第一季.assets/image-20210715172845881.png\" alt=\"image-20210715172845881\"></p>\n<h1 id=\"_2、单例设计模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2、单例设计模式\" aria-hidden=\"true\">#</a> 2、单例设计模式</h1>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>单例设计模式，即某个类在整个体系系统中只能有一个实例对象可被获取和使用的代码模式。\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><p>要点：</p>\n<ol>\n<li>\n<p>是某个类 只能有一个实例</p>\n<p>构造器私有化。</p>\n</li>\n<li>\n<p>是它必须自行创建这个实例</p>\n<p>含有一个该类的静态变量 来保存这个唯一的实例。</p>\n</li>\n<li>\n<p>是它必须自行向 整个系统提供这个 实例</p>\n<p>对外提供获取该实例对象的 方式：</p>\n<p>（1）直接暴露；（2）用静态变量的 get()方法获取；</p>\n</li>\n</ol>\n<p>单例设计模式的几种方式：（大体分为两种）</p>\n<ol>\n<li>饿汉式：直接创建对象，不存在线程安全问题。\n<ul>\n<li>直接实例化饿汉式（简洁直观）</li>\n<li>枚举式（最简洁）</li>\n<li>静态代码块饿汉式（适合复杂实例化）</li>\n</ul>\n</li>\n<li>懒汉式：延迟创建对象 。\n<ul>\n<li>线程不安全（适用于单线程）</li>\n<li>线程安全（适用于多线程）</li>\n<li>静态内部类形式（适用于多线程）</li>\n</ul>\n</li>\n</ol>\n<p>1、直接实例化饿汉式</p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>/**\n * @author lzy\n * 饿汉式：\n * \t\t在类初始化的时候直接创建实例对象，不管你是否需要这个对象都会创建\n *\n * \t\t（1）、构造器私有化\n * \t\t（2）、自行创建，并且用静态变量保存\n * \t\t（3）、向外提供这个实例\n * \t\t（4）、强调这是个单例，我们可以用final修改\n */\npublic class Singleton1 {\n\tpublic static final Singleton1 INSTANCE = new Singleton1();\n\tprivate Singleton1() {\n\n\t}\n}\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div></div><p><img src=\"第一季.assets/image-20210715181338667.png\" alt=\"image-20210715181338667\"></p>\n<p>2、枚举饿汉式</p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>/**\n * @author lzy\n * 枚举类型 ：表示该类型的对象是有限的几个\n * 我们可以限定为一个，就成了单例\n */\n\npublic enum Singleton2 {\n   INSTANCE\n}\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div></div><p><img src=\"第一季.assets/image-20210715181315770.png\" alt=\"image-20210715181315770\"></p>\n<p>3、静态代码块</p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>public class Singleton3 {\n   public static final Singleton3 INSTANCE;\n   \n   static {\n      INSTANCE = new Singleton3();\n   }\n   private Singleton3() {\n      \n   }\n}\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div></div><div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>运用的地方，当需要在初始化的时候从外部分文件中获取时，可以在静态代码块中进行初始化\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>public class Singleton3 {\n\tpublic static final Singleton3 INSTANCE;\n\tprivate String info;\n\tstatic {\n\t\tProperties pro = new Properties();\n\t\tSystem.out.println(Singleton3.class.getClassLoader());\n\t\ttry {\n\n\t\t\tpro.load(Singleton3.class.getClassLoader().getResourceAsStream(\"singleton123\"));\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\n\t\tINSTANCE = new Singleton3(pro.getProperty(\"info\"));\n\t}\n\tprivate Singleton3(String info) {\n\t\tthis.info = info;\n\t}\n\n\tpublic void setInfo(String info) {\n\t\tthis.info = info;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Singleton3{\" +\n\t\t\t\t\"info='\" + info + '\\'' +\n\t\t\t\t'}';\n\t}\n}\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br></div></div><p><img src=\"第一季.assets/image-20210715211335153.png\" alt=\"image-20210715211335153\"></p>\n<p>4、懒汉式：线程不安全（适用于单线程）</p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>/**\n * @author lzy\n * 懒汉式：延迟创建实例对象\n *     1、私有构造方法\n *     2、用一个静态变量保存这个唯一的实例\n *     3、提供一个静态变量，获取这个实例对象\n */\npublic class Singleton4 {\n   private static Singleton4 INSTANCE;\n   private Singleton4() {\n\n   }\n   public static Singleton4 getIntance() throws InterruptedException {\n      if(INSTANCE == null) {\n         Thread.sleep(200);\n         INSTANCE = new Singleton4();\n      }\n      return INSTANCE;\n   }\n}\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br></div></div><div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>//模拟多线程的环境\n@Test\n   public void test04() throws ExecutionException, InterruptedException {\n/*    Singleton4 s1 = Singleton4.getIntance();\n      Singleton4 s2 = Singleton4.getIntance();\n      System.out.println(s1);\n      System.out.println(s2);*/\n\n      //callable接口 相对runnable接口而言运行结束之后，能够提供返回值。泛型则是返回的数据类型\n      Callable&lt;Singleton4> c1 = new Callable&lt;Singleton4>() {\n         @Override\n         public Singleton4 call() throws Exception {\n            return Singleton4.getIntance();\n         }\n      };\n\n      ExecutorService e1 = Executors.newFixedThreadPool(2);\n      Future&lt;Singleton4> f1 = e1.submit(c1);\n      Future&lt;Singleton4> f2 = e1.submit(c1);\n\n      Singleton4 s1 = f1.get();\n      Singleton4 s2 = f2.get();\n\n      System.out.println(s1 == s2);\n      System.out.println(s1);\n      System.out.println(s2);\n\n      e1.shutdown();\n   }\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br></div></div><p><img src=\"第一季.assets/image-20210715230813915.png\" alt=\"image-20210715230813915\"></p>\n<p>5、懒汉式：线程安全，适用于多线程</p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>//使用synchronized锁\npublic class Singleton5 {\n   private static Singleton5 INSTANCE;\n   private Singleton5() {\n\n   }\n   public static Singleton5 getIntance() throws InterruptedException {\n      //判断是否为空是为了提高效率\n      if(INSTANCE == null) {\n         synchronized (Singleton5.class) {\n            if(INSTANCE == null) {\n               Thread.sleep(1000);\n               INSTANCE = new Singleton5();\n            }\n         }\n      }\n      return INSTANCE;\n   }\n}\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br></div></div><p><img src=\"第一季.assets/image-20210715232518246.png\" alt=\"image-20210715232518246\"></p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>//使用lock锁 -- 效果一样\npublic class Singleton5 {\n   private static Singleton5 INSTANCE;\n   private static Lock lock = new ReentrantLock();\n   private Singleton5() {\n\n   }\n   public static Singleton5 getIntance() throws InterruptedException {\n      lock.lock();\n      try {\n         if(INSTANCE == null) {\n            Thread.sleep(1000);\n            INSTANCE = new Singleton5();\n         }\n      } finally {\n         lock.unlock();\n      }\n      return INSTANCE;\n   }\n}\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br></div></div><p>6、既能保持延迟加载，又能 保持线程安全</p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>/**\n * @author lzy\n * 在内部类被加载和初始化时，才创建INSTANCE实例对象\n * 静态内部类不会自动随着外部类的 加载和初始化而初始化，它是要单独去加载和初始化的\n * 因为是在内部类加载和初始化时，创建的，因此线程是安全的。\n */\npublic class Singleton6 {\n   private Singleton6() {}\n   \n   public static class Inner {\n      private static final Singleton6 INSTANCE = new Singleton6();\n   }\n   \n   public static Singleton6 getInstance() {\n      return Inner.INSTANCE;\n   }\n}\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br></div></div><div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>JVM内部会保证一个类的&lt;clinit>方法在多线程环境下被正确的加锁同步，也就是说如果多个线程同时去进行“类的初始化”，那么只有一个线程会去执行类的&lt;clinit>方法，其他的线程都要阻塞等待，直到这个线程执行完&lt;clinit>方法。\n\n内部类解释-文章地址：https://blog.csdn.net/qq_35590091/article/details/107348114\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div></div><h1 id=\"_3、类的初始化和实例初始化等\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3、类的初始化和实例初始化等\" aria-hidden=\"true\">#</a> 3、类的初始化和实例初始化等</h1>\n<p><img src=\"第一季.assets/image-20210716004024144.png\" alt=\"image-20210716004024144\"></p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>7-2-5-1-4-3-10-6-9-8\n7-10-6-9-8\n\n5-1-10-6   -9-3-2-9-8-7\n9-3-2-9-8-7\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div></div><p><img src=\"第一季.assets/image-20210716004653694.png\" alt=\"image-20210716004653694\"></p>\n<p>考点：</p>\n<ul>\n<li>类初始化过程</li>\n</ul>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>1、一个类要创建实例需要先加载并初始化该类。\n\tmain方法所在的类需要先加载和初始化；\n2、一个子类要初始化需要先初始化父类。\n3、一个类初始化就是执行&lt;clinit>()方法；类初始化方法&lt;clinit>()\n\t(1)&lt;clinit>()方法由静态变量 显示赋值代码和静态代码块组成；\n\t(2)类变量显示赋值代码和静态代码块从上到下顺序执行；\n\t(3)&lt;clinit>()方法只执行一次。\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div></div><ul>\n<li>实例初始化过程</li>\n</ul>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>super();//构造器中，一定会存在，写或者不写，都会存在，在子类初始化中一定会调用父类的构造器。\n\n1、实例初始化就是执行&lt;init>()方法\n\t(1)&lt;init>()方法可能重载有多个，有几个构造器就有几个&lt;init>方法；\n\t(2)&lt;init>()方法由非静态实例变量显示赋值代码和非静态代码块 、对应的构造器代码组成；\n\t(3)非静态实例变量显示赋值代码和非静态代码块代码从上到下执行，而对应构造器的代码最后执行；\n\t(4)每次创建实例对象，调用对应构造器，执行的就是对应的&lt;init>方法；\n\t(5)&lt;init>方法的首行是super()或super(实参列表),即对应父类的&lt;init>方法；\n\t\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div></div><p><img src=\"第一季.assets/image-20210716012201235.png\" alt=\"image-20210716012201235\"></p>\n<ul>\n<li>方法的重写</li>\n</ul>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>1、哪些方法不可以被重写\n\t(1)final方法\n\t(2)静态方法\n\t(3)private等子类中不可见方法\n2、对象的多态性\n\t(1)子类中如果重写了父类的方法，通过子类 对象调用的一定是子类重写过的代码；\n\t(2)非静态方法默认的调用对象是this；\n\t(3)this对象在构造器或者说&lt;init>方法中就是正在创建的对象；\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div></div><p>进阶要求：</p>\n<p>1、重写和重载的区别？Override、Overload</p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>重载（Overload）是让类以统一的方式处理不同类型数据的一种手段，实质表现就是多个具有不同的参数个数或者类型的同名函数（返回值类型可随意，不能以返回类型作为重载函数的区分标准）同时存在于同一个类中，是一个类中多态性的一种表现（调用方法时通过传递不同参数个数和参数类型来决定具体使用哪个方法的多态性）。\n————————————————\n重写（Override）是父类与子类之间的多态性，实质是对父类的函数进行重新定义，如果在子类中定义某方法与其父类有相同的名称和参数则该方法被重写，不过子类函数的访问修饰权限不能小于父类的；若子类中的方法与父类中的某一方法具有相同的方法名、返回类型和参数表，则新方法将覆盖原有的方法，如需父类中原有的方法则可使用 super 关键字。\n————————————————\n版权声明：本文为CSDN博主「熊仙森」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qunqunstyle99/article/details/81007712\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div></div><p>2、Override重写的要求？</p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>(1)方法名\n(2)形参列表\n(3)返回值类型\n(4)抛出的异常列表\n(5)修饰符\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div></div><h1 id=\"_4、参数的传递机制\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4、参数的传递机制\" aria-hidden=\"true\">#</a> 4、参数的传递机制</h1>\n<p><img src=\"第一季.assets/image-20210716113059561.png\" alt=\"image-20210716113059561\"></p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>1\nhello\n2\n[2,2,3,4,5]\n11\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div></div><p>考点：</p>\n<ul>\n<li>方法的参数传递机制</li>\n<li>String、包装类等对象的不可变性</li>\n</ul>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>方法的参数传递机制：\n\t(1)形参是基本数据类型\n\t\t传递数据值\n\t(2)实参是引用数据类型\n\t\t传递地址值\n\t\t特殊的类型：String、包装类等对象不可变性\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div></div><p><img src=\"第一季.assets/image-20210716114615135.png\" alt=\"image-20210716114615135\"></p>\n<h1 id=\"_5、面试题-递归与迭代\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5、面试题-递归与迭代\" aria-hidden=\"true\">#</a> 5、面试题--递归与迭代</h1>\n<p><img src=\"第一季.assets/image-20210716114853977.png\" alt=\"image-20210716114853977\"></p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>/**\n * @author lzy\n */\npublic class Recusion {\n\tpublic static void main(String[] args) {\n\t\tint a = 4;\n\t\tSystem.out.println(recursion(a));\n\t}\n\n\tpublic static int recursion(int lastNum) {\n\t\tif(lastNum == 0) {\n\t\t\treturn 1;\n\t\t} else if(lastNum &lt; 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn recursion(lastNum-1) + recursion(lastNum-2);\n\t}\n}\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br></div></div><p><img src=\"第一季.assets/image-20210716120102386.png\" alt=\"image-20210716120102386\"></p>\n<p><img src=\"第一季.assets/image-20210716120720765.png\" alt=\"image-20210716120720765\"></p>\n<p><img src=\"第一季.assets/image-20210716121349115.png\" alt=\"image-20210716121349115\"></p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>\tpublic static void main(String[] args) {\n\t\tint k = 3;\n\t\tint sum = 0,one = 1, two = 2;\n\t\tif(k == 1 || k == 2) {\n\t\t\tsum = k;\n\t\t} else {\n\t\t\tfor (int i = 3; i &lt;= k; i++) {\n\t\t\t\tsum = one + two;\n\t\t\t\tone = two;\n\t\t\t\ttwo = sum;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(sum);\n\t}\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div></div><div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>小结\n方法调用自身称为递归，利用变量的原值推出新值称为迭代。\n·递归\n\t·优点:大问题转化为小问题，可以减少代码量，同时代码精简，可读性好;\n\t·缺点:递归调用浪费了空间，而且递归太深容易造成堆栈的溢出。\n·迭代\n\t·优点:代码运行效率好，因为时间只因循环次数增加而增加，而且没有额外的空间开销;\n\t·缺点:代码不如递归简洁，可读性好\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div></div><h1 id=\"_6、成员变量和局部变量\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6、成员变量和局部变量\" aria-hidden=\"true\">#</a> 6、成员变量和局部变量</h1>\n<p><img src=\"第一季.assets/image-20210716134906569.png\" alt=\"image-20210716134906569\"></p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>其中初始化：i=0 ,j=1, s=1\n2,1,3\n1,1,2\n\n答案：static只有一个。。。\n2,1,5\n1,1,5\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div></div><p>考点：</p>\n<p>1、就近原则</p>\n<p>2、变量的分裂；</p>\n<p>​\t(1)成员变量：类变量、实例变量</p>\n<p>​\t(2)局部变量</p>\n<p>3、非静态代码块的执行 ：每次创建实例对象都会执行</p>\n<p>4、方法的调用规则：调用一次执行一次</p>\n<p><img src=\"第一季.assets/image-20210716140134880.png\" alt=\"image-20210716140134880\"></p>\n<p><img src=\"第一季.assets/image-20210716140415337.png\" alt=\"image-20210716140415337\"></p>\n<p><img src=\"第一季.assets/image-20210716140030897.png\" alt=\"image-20210716140030897\"></p>\n<p><img src=\"第一季.assets/image-20210716140511129.png\" alt=\"image-20210716140511129\"></p>\n<p><img src=\"第一季.assets/image-20210716141511880.png\" alt=\"image-20210716141511880\"></p>\n<p><img src=\"第一季.assets/image-20210716141548762.png\" alt=\"image-20210716141548762\"></p>\n<h1 id=\"_7、bean的作用域\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_7、bean的作用域\" aria-hidden=\"true\">#</a> 7、bean的作用域</h1>\n<p><img src=\"第一季.assets/image-20210716141919455.png\" alt=\"image-20210716141919455\"></p>\n<p><img src=\"第一季.assets/image-20210716142209916.png\" alt=\"image-20210716142209916\"></p>\n<h1 id=\"_8、事务的传播属性和事务的隔离级别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_8、事务的传播属性和事务的隔离级别\" aria-hidden=\"true\">#</a> 8、事务的传播属性和事务的隔离级别</h1>\n<p>事务的传播行为：当事务方法被另一个事务方法 调用时，必须指定事务应该如何传播。</p>\n<p><img src=\"第一季.assets/image-20210716142451767.png\" alt=\"image-20210716142451767\"></p>\n<p><img src=\"第一季.assets/image-20210716143019091.png\" alt=\"image-20210716143019091\"></p>\n<p><img src=\"第一季.assets/image-20210716144037041.png\" alt=\"image-20210716144037041\"></p>\n<p><img src=\"第一季.assets/image-20210716144304255.png\" alt=\"image-20210716144304255\"></p>\n<p><img src=\"第一季.assets/image-20210716144512018.png\" alt=\"image-20210716144512018\"></p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>一、什么是幻读\n在一次事务里面，多次查询之后，结果集的个数不一致的情况叫做幻读。\n而多出来或者少的哪一行被叫做 幻行\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div></div><p>隔离级别能够解决事务并发产生的问题，但是事务的隔离级别越高，则 性能就越差。</p>\n<p><img src=\"第一季.assets/image-20210716145118290.png\" alt=\"image-20210716145118290\"></p>\n<h1 id=\"_9、解决乱码问题\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_9、解决乱码问题\" aria-hidden=\"true\">#</a> 9、解决乱码问题</h1>\n<p>1、post请求乱码问题</p>\n<p><img src=\"第一季.assets/image-20210716150305049.png\" alt=\"image-20210716150305049\"></p>\n<p><img src=\"第一季.assets/image-20210716150747911.png\" alt=\"image-20210716150747911\"></p>\n<p>2、get请求提交方式解决乱码问题</p>\n<p>(1)、修改tomcat配置文件信息，修改为UTF-8，字符编码方式</p>\n<p><img src=\"第一季.assets/image-20210716150546576.png\" alt=\"image-20210716150546576\"></p>\n<h1 id=\"_10、简单谈谈springmvc的-工作流程\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_10、简单谈谈springmvc的-工作流程\" aria-hidden=\"true\">#</a> 10、简单谈谈SpringMVC的 工作流程</h1>\n<p><img src=\"第一季.assets/image-20210716150916234.png\" alt=\"image-20210716150916234\"></p>\n<p><img src=\"第一季.assets/image-20210716150943540.png\" alt=\"image-20210716150943540\"></p>\n<p><img src=\"第一季.assets/image-20210716151024217.png\" alt=\"image-20210716151024217\"></p>\n<p>视图解析器在springmvc.xml中</p>\n<p><img src=\"第一季.assets/image-20210716151228224.png\" alt=\"image-20210716151228224\"></p>\n<p>在Handle不管是否会有异常都会返回一个ModelAndView视图。</p>\n<p><img src=\"第一季.assets/image-20210716151731985.png\" alt=\"image-20210716151731985\"></p>\n<h1 id=\"_11、mybaits中当实体类中的属性名和表中字段名不一样怎么办\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_11、mybaits中当实体类中的属性名和表中字段名不一样怎么办\" aria-hidden=\"true\">#</a> 11、Mybaits中当实体类中的属性名和表中字段名不一样怎么办？</h1>\n<p>三种解决方案</p>\n<p>l、写sql语句时起别名</p>\n<p><img src=\"第一季.assets/image-20210716155150999.png\" alt=\"image-20210716155150999\"></p>\n<p>2、在Mybaits的全局配置文件中，开启驼峰命名规则，默认是false不开启的 。</p>\n<p><img src=\"第一季.assets/image-20210716155245779.png\" alt=\"image-20210716155245779\"></p>\n<p>3、在Mapper映射文件中resultMap来自定义映射规则 。</p>\n<p><img src=\"第一季.assets/image-20210716155729696.png\" alt=\"image-20210716155729696\"></p>\n<h1 id=\"_12、linux常用服务相关命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_12、linux常用服务相关命令\" aria-hidden=\"true\">#</a> 12、linux常用服务相关命令</h1>\n<p><img src=\"第一季.assets/image-20210717165223561.png\" alt=\"image-20210717165223561\"></p>\n<p><img src=\"第一季.assets/image-20210717165819497.png\" alt=\"image-20210717165819497\"></p>\n<p><img src=\"第一季.assets/image-20210717165350600.png\" alt=\"image-20210717165350600\"></p>\n<h1 id=\"_13、git分支相关命令-实际应用\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_13、git分支相关命令-实际应用\" aria-hidden=\"true\">#</a> 13、git分支相关命令，实际应用</h1>\n<p><img src=\"第一季.assets/image-20210717170128316.png\" alt=\"image-20210717170128316\"></p>\n<p>平时项目中使用：切换分支命令</p>\n<p>一步完成，创建分支并且切换过去</p>\n<p>实际中，并行开发。解决bug，通过创建另一个分支，解决bug。还要合并到开发分支，将开发分支和线上分支保持 一致。测试分支也要。测试分支最后也要合并到开发以及线上分支 。</p>\n<p><img src=\"第一季.assets/image-20210717170856434.png\" alt=\"image-20210717170856434\"></p>\n<h1 id=\"_14、redis持久化的类型-以及区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_14、redis持久化的类型-以及区别\" aria-hidden=\"true\">#</a> 14、Redis持久化的类型，以及区别</h1>\n<p>两种持久化类型：RDB、AOF，两种互补</p>\n<p>RDB（Redis DataBase）和AOF（Append Only File）</p>\n<p><img src=\"第一季.assets/image-20210717171149456.png\" alt=\"image-20210717171149456\"></p>\n<p><img src=\"第一季.assets/image-20210717171225115.png\" alt=\"image-20210717171225115\"></p>\n<p><img src=\"第一季.assets/image-20210717171246755.png\" alt=\"image-20210717171246755\"></p>\n<p><img src=\"第一季.assets/image-20210717171434973.png\" alt=\"image-20210717171434973\"></p>\n<p><img src=\"第一季.assets/image-20210717171514052.png\" alt=\"image-20210717171514052\"></p>\n<p><img src=\"第一季.assets/image-20210717171532999.png\" alt=\"image-20210717171532999\"></p>\n<p><img src=\"第一季.assets/image-20210717171659304.png\" alt=\"image-20210717171659304\"></p>\n<h1 id=\"_15、myswl什么时候适合创建索引-什么时候不适合\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_15、myswl什么时候适合创建索引-什么时候不适合\" aria-hidden=\"true\">#</a> 15、Myswl什么时候适合创建索引，什么时候不适合</h1>\n<p><img src=\"第一季.assets/image-20210717172108049.png\" alt=\"image-20210717172108049\"></p>\n<p><img src=\"第一季.assets/image-20210717172149852.png\" alt=\"image-20210717172149852\"></p>\n<p>慢：相当于维护了两套数据。所以慢</p>\n<p><img src=\"第一季.assets/image-20210717172245239.png\" alt=\"image-20210717172245239\"></p>\n<p>做分组的时候，以及做了一次排序。</p>\n<p><img src=\"第一季.assets/image-20210717172452318.png\" alt=\"image-20210717172452318\"></p>\n<p>过滤性字段：比如性别等不适合创建索引，而相对于身份证号等适合创建索引。</p>\n<h1 id=\"_16、jvm垃圾回收机制-gc发生在jvm哪部分-有几种红gc-它们的算法是什么\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_16、jvm垃圾回收机制-gc发生在jvm哪部分-有几种红gc-它们的算法是什么\" aria-hidden=\"true\">#</a> 16、JVM垃圾回收机制，GC发生在JVM哪部分，有几种红GC，它们的算法是什么？</h1>\n<p><img src=\"第一季.assets/image-20210717174935557.png\" alt=\"image-20210717174935557\"></p>\n<p><img src=\"第一季.assets/image-20210717175009472.png\" alt=\"image-20210717175009472\"></p>\n<p><img src=\"第一季.assets/image-20210717175128773.png\" alt=\"image-20210717175128773\"></p>\n<p><img src=\"第一季.assets/image-20210717175252335.png\" alt=\"image-20210717175252335\"></p>\n<p>1、复制算法</p>\n<p><img src=\"第一季.assets/image-20210717175442546.png\" alt=\"image-20210717175442546\"></p>\n<p><img src=\"第一季.assets/image-20210717175416319.png\" alt=\"image-20210717175416319\"></p>\n<p>2、标记清除</p>\n<p><img src=\"第一季.assets/image-20210717175523645.png\" alt=\"image-20210717175523645\"></p>\n<p><img src=\"第一季.assets/image-20210717175540669.png\" alt=\"image-20210717175540669\"></p>\n<p>3、标记压缩</p>\n<p><img src=\"第一季.assets/image-20210717175641555.png\" alt=\"image-20210717175641555\"></p>\n<p><img src=\"第一季.assets/image-20210717175650648.png\" alt=\"image-20210717175650648\"></p>\n<p>在老年代中这两种算法是混合使用的，当标记清除算法多次产生了许多碎片了之后，进行标记压缩算法。</p>\n<p>4、标记清除压缩算法</p>\n<p><img src=\"第一季.assets/image-20210717180230782.png\" alt=\"image-20210717180230782\"></p>\n<p><img src=\"第一季.assets/image-20210717180248413.png\" alt=\"image-20210717180248413\"></p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>GC发生在堆中，引用计数法被淘汰了，无法收集循环引用算法，A引用 B，B引用A。所以主要有四种。\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><h1 id=\"_17、redis在项目中的使用场景\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_17、redis在项目中的使用场景\" aria-hidden=\"true\">#</a> 17、redis在项目中的使用场景，</h1>\n<p>老版本五种数据类型</p>\n<p><img src=\"第一季.assets/image-20210717181646346.png\" alt=\"image-20210717181646346\"></p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>hash,当需要修改的时候，修改某个字段的时候 ，只需要修改对应的Hset。不使用字符串是因为会进行反序列和序列化，而序列化和反序列化，使用IO进行操作，增加了IO次数，降低了机器性能 。\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br></div></div><h1 id=\"_18、elasticsearch和solr的区别\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_18、elasticsearch和solr的区别\" aria-hidden=\"true\">#</a> 18、Elasticsearch和solr的区别</h1>\n<p><img src=\"第一季.assets/image-20210717181926967.png\" alt=\"image-20210717181926967\"></p>\n<p>Lucene是信息检索程序库，而不是搜索引擎。</p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>\t当用户在主页上搜索关键词“华为手机”时，假设只存在正向索引（forward index），那么就需要扫描索引库中的所有文档，找出所有包含关键词“华为手机”的文档，再根据打分模型进行打分，排出名次后呈现给用户。因为互联网上收录在搜索引擎中的文档的数目是个天文数字，这样的索引结构根本无法满足实时返回排名结果的要求。\n\t所以，搜索引擎会将正向索引重新构建为倒排索引，即把文件ID对应到关键词的映射转换为关键词到文件ID的映射，每个关键词都对应着一系列的文件，这些文件中都出现这个关键词。\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div></div><p><img src=\"第一季.assets/image-20210717183000092.png\" alt=\"image-20210717183000092\"></p>\n<p><img src=\"第一季.assets/image-20210717183757962.png\" alt=\"image-20210717183757962\"></p>\n<p><img src=\"第一季.assets/image-20210717184002270.png\" alt=\"image-20210717184002270\"></p>\n<p><img src=\"第一季.assets/image-20210717183252923.png\" alt=\"image-20210717183252923\"></p>\n<p><img src=\"第一季.assets/image-20210717183339090.png\" alt=\"image-20210717183339090\"></p>\n<p><img src=\"第一季.assets/image-20210717183432602.png\" alt=\"image-20210717183432602\"></p>\n<h1 id=\"_19、单点登录实现过程\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_19、单点登录实现过程\" aria-hidden=\"true\">#</a> 19、单点登录实现过程</h1>\n<p>单点登录：一处登录，多处使用</p>\n<p>前提：单点登录，多使用在 分布式系统种。单独的Javaweb项目也可以使用，但是没有必要。</p>\n<p><img src=\"第一季.assets/image-20210717222452610.png\" alt=\"image-20210717222452610\"></p>\n<p><img src=\"第一季.assets/image-20210717222502020.png\" alt=\"image-20210717222502020\"></p>\n<p><img src=\"第一季.assets/image-20210717222935793.png\" alt=\"image-20210717222935793\"></p>\n<p><img src=\"第一季.assets/image-20210717223306566.png\" alt=\"image-20210717223306566\"></p>\n<h1 id=\"_20、购物车实现过程\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_20、购物车实现过程\" aria-hidden=\"true\">#</a> 20、购物车实现过程</h1>\n<p>分两个方向分析用户购物车的关系：</p>\n<p>1、购物车跟用户的关系</p>\n<ul>\n<li>一个用户必须对应一个购物车【一个用户不管买多少商品，都会存在属于自己的购物车】</li>\n<li>单点登录一定在购物车之前</li>\n</ul>\n<p>2、跟购物车有关的操作有哪些？</p>\n<ul>\n<li>\n<p>添加购物车</p>\n<ul>\n<li>\n<p>用户未登录状态</p>\n<ul>\n<li>\n<p>添加到什么地方，？未登录将数据保存到哪里？</p>\n<p>a) Redis? -----京东</p>\n<p>b) Cookie?  -----自己开发项目，可以存在【浏览器禁用cookie,禁用可以存在local Storage中】</p>\n</li>\n</ul>\n</li>\n<li>\n<p>用户登录状态</p>\n<ul>\n<li>\n<p>Redis缓存中【读写速度快，存在数据库，会给网站性能带来负担】</p>\n<p>使用Hash存储：hset(key,field,vallue)。key:user:userId:cart。</p>\n<p>Hset(key,skuId,value)。</p>\n</li>\n<li>\n<p>保证数据的安全性，还要将数据存在数据库中【Oracle、Mysql】</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>展示购物车</p>\n<ul>\n<li>\n<p>未登录状态</p>\n<p>a) 直接从cookie中取得数据展示即可</p>\n</li>\n<li>\n<p>登录状态</p>\n<p>用户一旦登录：必须显示数据库【redis】+cookie中的 购物车数据。</p>\n<p>a)Cookie中有三条记录</p>\n<p>b)Redis中有五条记录</p>\n<p>c)真正展示的时候应该是有八条记录</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"_21、消息队列在项目中的使用\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_21、消息队列在项目中的使用\" aria-hidden=\"true\">#</a> 21、消息队列在项目中的使用</h1>\n<p>背景：在分布式项目中是如何处理高并发的</p>\n<p><img src=\"第一季.assets/image-20210718153815370.png\" alt=\"image-20210718153815370\"></p>\n<p><img src=\"第一季.assets/image-20210718153923128.png\" alt=\"image-20210718153923128\"></p>\n<p><img src=\"第一季.assets/image-20210718154015491.png\" alt=\"image-20210718154015491\"></p>\n<p><img src=\"第一季.assets/image-20210718154049687.png\" alt=\"image-20210718154049687\"></p>\n<p><img src=\"第一季.assets/image-20210718154127363.png\" alt=\"image-20210718154127363\"></p>\n<p><img src=\"第一季.assets/image-20210718154502158.png\" alt=\"image-20210718154502158\"></p>\n","import { ssrRender } from \"./第一季.html.vue?vue&type=template&id=5ea298df\"\nconst script = {}\n\nimport exportComponent from \"D:\\\\program_workspace\\\\myBlog\\\\myGithubBlog\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['ssrRender',ssrRender]])\n\nexport default __exports__","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    for (const [key, val] of props) {\n        sfc[key] = val;\n    }\n    return sfc;\n};\n"],"names":[],"sourceRoot":""}